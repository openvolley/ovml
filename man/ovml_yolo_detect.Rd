% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/yolo.R
\name{ovml_yolo_detect}
\alias{ovml_yolo_detect}
\title{Detect objects in image using a YOLO network}
\usage{
ovml_yolo_detect(
  net,
  image_file,
  conf = 0.6,
  nms_conf = 0.4,
  num_classes = 80,
  input_image_size = 416L,
  class_labels = ovml_class_labels()
)
}
\arguments{
\item{net}{yolo: as returned by \link{ovml_yolo}}

\item{image_file}{string: path to image file}

\item{conf}{scalar: confidence level}

\item{nms_conf}{scalar: non-max suppression confidence level}

\item{num_classes}{integer: number of classes that the network was trained on}

\item{input_image_size}{integer: image size expected by the network}

\item{class_labels}{character: the labels corresponding to the class numbers}
}
\value{
A matrix
}
\description{
Detect objects in image using a YOLO network
}
\examples{
\dontrun{
 dn <- ovml_yolo()
 dn$load_weights("~/untan.gl/volleyball/ryolotorch/yolov3.weights")
 img <- system.file("extdata/images/2019_03_01-KATS-BEDS-frame.jpg", package = "ovml")
 res <- ovml_yolo_detect(dn, img)

 ## plot with base graphics
 img <- jpeg::readJPEG(img)
 plot(c(0, dim(img)[2]), c(0, dim(img)[1]), type = "n", axes = FALSE, xlab = "", ylab = "", asp = 1)
 rasterImage(img, 0, 0, dim(img)[2], dim(img)[1])
 for (i in seq_len(nrow(res))) lines(c(res$xmin[i], rep(res$xmax[i], 2), rep(res$xmin[i], 2)),
                                     c(rep(res$ymin[i], 2), rep(res$ymax[i], 2), res$ymin[i]), col = "blue")
}

}
\seealso{
\link{ovml_yolo}
}
